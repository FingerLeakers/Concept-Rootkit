A conceptual "virus" written for a term project. 
Class:     COSC 439.101
Professor: Shiva Azadegan
Authors:   Kevin Hoganson
           Alexander Slonim
           Zachary Brown
Name:      env0y (apt to change)
Target:    Debian-styled Linux

NOTE: Any of this could be cut out (for the sake of time and ease).
      However, primary functionality of the virus will be retained.

This particular virus is intended to do the following (perhaps in a modular, config-file format):
  [+] Keylog input from the keyboard while running in the background.
      -- No textfile is used to store the keylog buffer (minimizing artifacts on disk).
      -- The reset of a timer forwards the contents of the buffer (some arbitrary 'n' characters) to a control server.
         * Key buffer can be translated on host-side or server-side.

  // Research a better way to do this. 
  // Could also package a priv. escalation exploit alongside the virus.
 ?[+] If it does not have root privileges, it can attempt to get the password for sudo:
      -- Proceed to make a gnome-screensaver-command call with option -l to lock the screen. 
      -- Clear keylogging buffer, continue to log keyboard events, and log the password.
         * Continue to keylog in the same fashion until login is successful.
         * Buffer cleared with every press of <ENTER>.
         * Translate 
      -- Run escalation-required commands with newly found sudo. 

  [+] Listens on network interface traffic, non-promiscuous mode.
      -- If ACK number out of a TCP header is a particular number, do something fun.
      -- Perhaps return a shell to the control server.
         * This would involve coding up a shell environment. 
         * Said shell environment would be comparable to the Meterpreter payload.

  [+] Conceals itself:
  	  NOTE: self-modifying code is well beyond the scope of our ability and timeframe. 
      -- Obfuscation / packing to prevent ease of reverse engineering.
      -- Use of veil in order to hide the virus in another program (like Putty), effectively a trojan horse.
      -- Replicates itself, then removes itself from previous location. 
      -- Popular tools / commands used for further analysis would: 
         * Replicate the virus further.
         * Return a shell (an additional session) to a control server.
         * Render the operating system unusuable upon discovery before deleting itself.

  [+] Need to think of an infection vector. Possibilities:
  	  NOTE: most infection vectors will involve social engineering.
      -- python -m SimpleHTTPServer [port]
         * We host the content in a directory and make it available to the, say, 192.168.1.0/24 subnet.
      -- JavaScript download initiated when visiting a URL (a hypothetical XSS attack).
      -- Transfer via USB (auto-play functionality).
      -- Use metasploit to place the payload on a particular URI path appended to a legitimate domain name.
         * Involves DNS spoofing.
